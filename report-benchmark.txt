# JMH version: 1.23
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-b520.38
# VM invoker: /home/raul.alzate/Descargas/idea-IC-193.6015.39/jbr/bin/java
# VM options: -javaagent:/home/raul.alzate/Descargas/idea-IC-193.6015.39/lib/idea_rt.jar=36311:/home/raul.alzate/Descargas/idea-IC-193.6015.39/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.medellinjug.Benchmarks.getMaxValue_forLoop

# Run progress: 0,00% complete, ETA 00:06:40
# Fork: 1 of 1
# Warmup Iteration   1: 88057309,618 ops/s
# Warmup Iteration   2: 91997638,190 ops/s
# Warmup Iteration   3: 92802894,247 ops/s
# Warmup Iteration   4: 93122275,070 ops/s
# Warmup Iteration   5: 94935576,294 ops/s
Iteration   1: 85023354,520 ops/s
Iteration   2: 88662980,328 ops/s
Iteration   3: 87937148,132 ops/s
Iteration   4: 91724051,830 ops/s
Iteration   5: 89432250,926 ops/s


Result "org.medellinjug.Benchmarks.getMaxValue_forLoop":
  88555957,147 ±(99.9%) 9368699,488 ops/s [Average]
  (min, avg, max) = (85023354,520, 88555957,147, 91724051,830), stdev = 2433021,505
  CI (99.9%): [79187257,659, 97924656,635] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-b520.38
# VM invoker: /home/raul.alzate/Descargas/idea-IC-193.6015.39/jbr/bin/java
# VM options: -javaagent:/home/raul.alzate/Descargas/idea-IC-193.6015.39/lib/idea_rt.jar=36311:/home/raul.alzate/Descargas/idea-IC-193.6015.39/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.medellinjug.Benchmarks.getMaxValue_stream

# Run progress: 25,00% complete, ETA 00:05:03
# Fork: 1 of 1
# Warmup Iteration   1: 10001134,896 ops/s
# Warmup Iteration   2: 10081900,160 ops/s
# Warmup Iteration   3: 7721457,407 ops/s
# Warmup Iteration   4: 8149073,678 ops/s
# Warmup Iteration   5: 8403639,817 ops/s
Iteration   1: 8449979,790 ops/s
Iteration   2: 8038254,064 ops/s
Iteration   3: 7861771,139 ops/s
Iteration   4: 8333055,405 ops/s
Iteration   5: 7854490,379 ops/s


Result "org.medellinjug.Benchmarks.getMaxValue_stream":
  8107510,155 ±(99.9%) 1049890,598 ops/s [Average]
  (min, avg, max) = (7854490,379, 8107510,155, 8449979,790), stdev = 272653,254
  CI (99.9%): [7057619,558, 9157400,753] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-b520.38
# VM invoker: /home/raul.alzate/Descargas/idea-IC-193.6015.39/jbr/bin/java
# VM options: -javaagent:/home/raul.alzate/Descargas/idea-IC-193.6015.39/lib/idea_rt.jar=36311:/home/raul.alzate/Descargas/idea-IC-193.6015.39/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.medellinjug.Benchmarks.playersGreaterThan_forLoop

# Run progress: 50,00% complete, ETA 00:03:22
# Fork: 1 of 1
# Warmup Iteration   1: 1042,257 ops/s
# Warmup Iteration   2: 1227,120 ops/s
# Warmup Iteration   3: 1128,205 ops/s
# Warmup Iteration   4: 1029,211 ops/s
# Warmup Iteration   5: 1014,627 ops/s
Iteration   1: 1009,975 ops/s
Iteration   2: 1020,482 ops/s
Iteration   3: 908,546 ops/s
Iteration   4: 870,648 ops/s
Iteration   5: 894,580 ops/s


Result "org.medellinjug.Benchmarks.playersGreaterThan_forLoop":
  940,846 ±(99.9%) 267,005 ops/s [Average]
  (min, avg, max) = (870,648, 940,846, 1020,482), stdev = 69,340
  CI (99.9%): [673,841, 1207,851] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-b520.38
# VM invoker: /home/raul.alzate/Descargas/idea-IC-193.6015.39/jbr/bin/java
# VM options: -javaagent:/home/raul.alzate/Descargas/idea-IC-193.6015.39/lib/idea_rt.jar=36311:/home/raul.alzate/Descargas/idea-IC-193.6015.39/bin -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.medellinjug.Benchmarks.playersGreaterThan_stream

# Run progress: 75,00% complete, ETA 00:01:41
# Fork: 1 of 1
# Warmup Iteration   1: 775,803 ops/s
# Warmup Iteration   2: 765,575 ops/s
# Warmup Iteration   3: 772,621 ops/s
# Warmup Iteration   4: 770,500 ops/s
# Warmup Iteration   5: 783,540 ops/s
Iteration   1: 752,949 ops/s
Iteration   2: 718,754 ops/s
Iteration   3: 722,459 ops/s
Iteration   4: 805,047 ops/s
Iteration   5: 716,812 ops/s


Result "org.medellinjug.Benchmarks.playersGreaterThan_stream":
  743,204 ±(99.9%) 144,646 ops/s [Average]
  (min, avg, max) = (716,812, 743,204, 805,047), stdev = 37,564
  CI (99.9%): [598,559, 887,850] (assumes normal distribution)


# Run complete. Total time: 00:06:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt         Score         Error  Units
Benchmarks.getMaxValue_forLoop         thrpt    5  88555957,147 ± 9368699,488  ops/s
Benchmarks.getMaxValue_stream          thrpt    5   8107510,155 ± 1049890,598  ops/s
Benchmarks.playersGreaterThan_forLoop  thrpt    5       940,846 ±     267,005  ops/s
Benchmarks.playersGreaterThan_stream   thrpt    5       743,204 ±     144,646  ops/s